{"version":3,"sources":["../src/Monzilla.js"],"names":["Monzilla","constructor","log","runCommand","info2","args","command","childProcess","on","code","signal","restart","warning2","error","message","process","exit","stdout","data","write","stderr","restartCommand","killProcess","pid","children","map","p","PID","join","run","argv","options","boolean","version","info","help","globs","_","globList","split","length","filenames","forEach","glob","concat","dirnames","Set","filename","dirname","has","statSync","isDirectory","add","emitKeypressEvents","stdin","isTTY","setRawMode","str","key","ctrl","name","then","watchers","watcher","watch","eventType","timeout","clearTimeout","push"],"mappings":"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","file":"Monzilla.js","sourcesContent":["import { sync as globSync } from 'glob'\nimport parseArgs from 'minimist'\nimport path from 'path'\nimport fs from 'fs'\nimport { exec } from 'child_process'\nimport { setTimeout } from 'timers'\nimport autoBind from 'auto-bind2'\nimport readline from 'readline'\nimport chalk from 'chalk'\nimport psTree from 'ps-tree'\nimport { promisify } from 'util'\nimport { fullVersion } from './version'\n\nexport class Monzilla {\n  constructor(log) {\n    autoBind(this)\n    this.log = log\n  }\n\n  runCommand() {\n    this.log.info2(`Running command '${this.args.command}'`)\n    this.log.info2('Control+C to exit/Control+R to restart')\n    const childProcess = exec(this.args.command)\n\n    childProcess.on('exit', (code, signal) => {\n      if (this.childProcess.restart) {\n        this.runCommand(this.args.command)\n      } else {\n        if (code === 0) {\n          this.log.info2(`Command exited cleanly`)\n        } else {\n          this.log.warning2(`Command exited with error code ${code}`)\n        }\n        this.childProcess = null\n        this.log.info2('Waiting for file changes before running again')\n      }\n    })\n\n    childProcess.on('error', (error) => {\n      this.log.error(error.message)\n      process.exit(-1)\n    })\n\n    childProcess.stdout.on('data', (data) => {\n      process.stdout.write(data)\n    })\n\n    childProcess.stderr.on('data', (data) => {\n      process.stderr.write(data)\n    })\n\n    this.childProcess = childProcess\n  }\n\n  restartCommand() {\n    if (this.childProcess) {\n      this.childProcess.restart = true\n      this.killProcess(this.childProcess.pid)\n      // Process will restart when it exits\n    } else {\n      this.runCommand()\n    }\n  }\n\n  async killProcess(pid) {\n    const children = await promisify(psTree)(pid)\n\n    try {\n      await promisify(exec)(['kill', '-9', ...children.map(p => p.PID), pid].join(' '))\n    } catch (error) {\n      this.log.error(`Could not kill PID ${pid}`)\n    }\n  }\n\n  async run(argv) {\n    const options = {\n      boolean: [ 'help', 'version' ],\n      '--': true\n    }\n    this.args = parseArgs(argv, options)\n\n    if (this.args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    if (this.args.help) {\n      this.log.info(`\nusage: monzilla [options] <glob>[:<glob>...] -- <command>...\n\noptions:\n  --help                        Shows this help.\n  --version                     Shows the tool version.\n`)\n      return 0\n    }\n\n    const globs = this.args._[0]\n\n    if (!globs) {\n      this.log.error('Must supply at least one glob')\n      return -1\n    }\n\n    const globList = globs.split(':')\n\n    this.args.command = this.args['--'].join(' ')\n\n    if (this.args.command.length === 0) {\n      this.log.error('Must supply a command to run')\n      return -1\n    }\n\n    let filenames = []\n\n    globList.forEach(glob => {\n      filenames = filenames.concat(globSync(glob))\n    })\n\n    let dirnames = new Set()\n\n    filenames.forEach(filename => {\n      const dirname = path.dirname(filename)\n\n      if (!dirnames.has(dirname) && fs.statSync(dirname).isDirectory()) {\n        dirnames.add(dirname)\n      }\n    })\n\n    readline.emitKeypressEvents(process.stdin)\n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(true)\n    }\n\n    process.stdin.on('keypress', (str, key) => {\n      if (key.ctrl) {\n        switch (key.name) {\n          case 'c':\n            if (this.childProcess) {\n              this.killProcess(this.childProcess.pid).then(() => {\n                process.exit(0)\n              })\n            } else {\n              process.exit(0)\n            }\n            break\n          case 'r':\n            this.restartCommand()\n            break\n          default:\n            break\n        }\n      }\n    })\n\n    this.runCommand()\n\n    let watchers = []\n\n    dirnames.forEach(dirname => {\n      const watcher = fs.watch(dirname)\n\n      watcher.on('change', (eventType, filename) => {\n        if (this.timeout) {\n          clearTimeout(this.timeout)\n        }\n\n        // Debounce changes to files\n        this.timeout = setTimeout(() => {\n          this.restartCommand()\n        }, 500)\n      })\n\n      watchers.push(watcher)\n    })\n\n    return 0\n  }\n}\n"]}