{"version":3,"sources":["../src/MonzillaTool.js"],"names":["MonzillaTool","autobind","constructor","container","toolName","log","debug","runCommand","info2","args","command","childProcess","env","process","FORCE_COLOR","shell","on","code","signal","warning2","restart","error","message","exit","stdout","data","write","stderr","restartCommand","killProcess","pid","children","psTree","exec","map","p","PID","join","run","argv","options","boolean","version","info","fullVersion","help","globs","_","globList","split","length","filenames","forEach","glob","concat","dirnames","Set","filename","dirname","path","has","fs","statSync","isDirectory","add","readline","emitKeypressEvents","stdin","isTTY","setRawMode","str","key","ctrl","name","then","watchers","watcher","watch","eventType","timeout","clearTimeout","push"],"mappings":"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","sourcesContent":["import { sync as globSync } from \"glob\"\nimport parseArgs from \"minimist\"\nimport path from \"path\"\nimport fs from \"fs\"\nimport { exec } from \"child_process\"\nimport { setTimeout } from \"timers\"\nimport autobind from \"autobind-decorator\"\nimport readline from \"readline\"\nimport psTree from \"ps-tree\"\nimport { promisify } from \"util\"\nimport * as version from \"./version\"\n\n@autobind\nexport class MonzillaTool {\n  constructor(container) {\n    this.toolName = container.toolName\n    this.log = container.log\n    this.debug = container.debug\n  }\n\n  runCommand() {\n    this.log.info2(`Running command '${this.args.command}'`)\n    this.log.info2(\"Control+C to exit/Control+R to restart\")\n    const childProcess = exec(this.args.command, {\n      env: { ...process.env, FORCE_COLOR: 1 },\n      shell: \"/bin/bash\",\n    })\n\n    childProcess.on(\"exit\", (code, signal) => {\n      if (code) {\n        if (code === 0) {\n          this.log.info2(`Command exited cleanly`)\n        } else {\n          this.log.warning2(`Command exited with error code ${code}`)\n        }\n      }\n\n      if (signal) {\n        this.log.warning2(`Command exited due to signal ${signal}`)\n      }\n\n      if (this.childProcess.restart) {\n        this.runCommand(this.args.command)\n      } else {\n        this.childProcess = null\n        this.log.info2(\"Waiting for file changes before running again\")\n      }\n    })\n\n    childProcess.on(\"error\", (error) => {\n      this.log.error(error.message)\n      process.exit(-1)\n    })\n\n    childProcess.stdout.on(\"data\", (data) => {\n      process.stdout.write(data)\n    })\n\n    childProcess.stderr.on(\"data\", (data) => {\n      process.stderr.write(data)\n    })\n\n    this.childProcess = childProcess\n  }\n\n  restartCommand() {\n    if (this.childProcess) {\n      this.childProcess.restart = true\n      this.killProcess(this.childProcess.pid)\n      // Process will restart when it exits\n    } else {\n      this.runCommand()\n    }\n  }\n\n  async killProcess(pid) {\n    const children = await promisify(psTree)(pid)\n\n    try {\n      await promisify(exec)(\n        [\"kill\", \"-9\", ...children.map((p) => p.PID), pid].join(\" \")\n      )\n    } catch (error) {\n      this.log.error(`Could not kill PID ${pid}`)\n    }\n  }\n\n  async run(argv) {\n    const options = {\n      boolean: [\"help\", \"version\"],\n      \"--\": true,\n    }\n    this.args = parseArgs(argv, options)\n\n    if (this.args.version) {\n      this.log.info(version.fullVersion)\n      return 0\n    }\n\n    if (this.args.help) {\n      this.log.info(`\nusage: ${this.toolName} [options] <glob>[:<glob>...] -- <command>...\n\noptions:\n  --help                        Shows this help.\n  --version                     Shows the tool version.\n`)\n      return 0\n    }\n\n    const globs = this.args._[0]\n\n    if (!globs) {\n      this.log.error(\"Must supply at least one glob\")\n      return -1\n    }\n\n    const globList = globs.split(\":\")\n\n    this.args.command = this.args[\"--\"].join(\" \")\n\n    if (this.args.command.length === 0) {\n      this.log.error(\"Must supply a command to run\")\n      return -1\n    }\n\n    let filenames = []\n\n    globList.forEach((glob) => {\n      filenames = filenames.concat(globSync(glob))\n    })\n\n    let dirnames = new Set()\n\n    filenames.forEach((filename) => {\n      const dirname = path.dirname(filename)\n\n      if (!dirnames.has(dirname) && fs.statSync(dirname).isDirectory()) {\n        dirnames.add(dirname)\n      }\n    })\n\n    readline.emitKeypressEvents(process.stdin)\n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(true)\n    }\n\n    process.stdin.on(\"keypress\", (str, key) => {\n      if (key.ctrl) {\n        switch (key.name) {\n          case \"c\":\n            if (this.childProcess) {\n              this.killProcess(this.childProcess.pid).then(() => {\n                process.exit(0)\n              })\n            } else {\n              process.exit(0)\n            }\n            break\n          case \"r\":\n            this.restartCommand()\n            break\n          default:\n            break\n        }\n      }\n    })\n\n    this.runCommand()\n\n    let watchers = []\n\n    dirnames.forEach((dirname) => {\n      const watcher = fs.watch(dirname)\n\n      watcher.on(\"change\", (eventType, filename) => {\n        // Debounce changes to files\n        if (this.timeout) {\n          clearTimeout(this.timeout)\n        }\n        this.timeout = setTimeout(() => {\n          this.restartCommand()\n        }, 500)\n      })\n\n      watchers.push(watcher)\n    })\n\n    return 0\n  }\n}\n"],"file":"MonzillaTool.js"}