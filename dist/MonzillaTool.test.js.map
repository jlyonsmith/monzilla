{"version":3,"sources":["../src/MonzillaTool.test.js"],"names":["getMockLog","info","jest","fn","warning","error","getOutput","calls","mock","length","test","done","mockLog","tool","Monzilla","run","then","exitCode","expect","toBe","toEqual","stringContaining","stringMatching"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEA,SAASA,UAAT,GAAsB;AACpB,SAAO;AACLC,IAAAA,IAAI,EAAEC,IAAI,CAACC,EAAL,EADD;AAELC,IAAAA,OAAO,EAAEF,IAAI,CAACC,EAAL,EAFJ;AAGLE,IAAAA,KAAK,EAAEH,IAAI,CAACC,EAAL;AAHF,GAAP;AAKD;;AAED,SAASG,SAAT,CAAmBH,EAAnB,EAAuB;AACrB,QAAMI,KAAK,GAAGJ,EAAE,CAACK,IAAH,CAAQD,KAAtB;;AACA,MAAIA,KAAK,CAACE,MAAN,GAAe,CAAf,IAAoBF,KAAK,CAAC,CAAD,CAAL,CAASE,MAAT,GAAkB,CAA1C,EAA6C;AAC3C,WAAOF,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF;;AAEDG,IAAI,CAAC,WAAD,EAAcC,IAAI,IAAI;AACxB,QAAMC,OAAO,GAAGZ,UAAU,EAA1B;AACA,QAAMa,IAAI,GAAG,IAAIC,kBAAJ,CAAaF,OAAb,CAAb;AAEA,SAAOC,IAAI,CAACE,GAAL,CAAS,CAAC,QAAD,CAAT,EAAqBC,IAArB,CAA0BC,QAAQ,IAAI;AAC3CC,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsB,CAAtB;AACAD,IAAAA,MAAM,CAACZ,SAAS,CAACM,OAAO,CAACX,IAAT,CAAV,CAAN,CAAgCmB,OAAhC,CAAwCF,MAAM,CAACG,gBAAP,CAAwB,QAAxB,CAAxC;AACAV,IAAAA,IAAI;AACL,GAJM,CAAP;AAKD,CATG,CAAJ;AAWAD,IAAI,CAAC,cAAD,EAAiBC,IAAI,IAAI;AAC3B,QAAMC,OAAO,GAAGZ,UAAU,EAA1B;AACA,QAAMa,IAAI,GAAG,IAAIC,kBAAJ,CAAaF,OAAb,CAAb;AAEA,SAAOC,IAAI,CAACE,GAAL,CAAS,CAAC,WAAD,CAAT,EAAwBC,IAAxB,CAA6BC,QAAQ,IAAI;AAC9CC,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsB,CAAtB;AACAD,IAAAA,MAAM,CAACZ,SAAS,CAACM,OAAO,CAACX,IAAT,CAAV,CAAN,CAAgCmB,OAAhC,CAAwCF,MAAM,CAACI,cAAP,CAAsB,YAAtB,CAAxC;AACAX,IAAAA,IAAI;AACL,GAJM,CAAP;AAKD,CATG,CAAJ;AAWAD,IAAI,CAAC,cAAD,EAAiBC,IAAI,IAAI;AAC3B,QAAMC,OAAO,GAAGZ,UAAU,EAA1B;AACA,QAAMa,IAAI,GAAG,IAAIC,kBAAJ,CAAaF,OAAb,CAAb;AAEA,SAAOC,IAAI,CAACE,GAAL,CAAS,EAAT,EAAaC,IAAb,CAAkBC,QAAQ,IAAI;AACnCC,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,IAAjB,CAAsB,CAAC,CAAvB;AACAR,IAAAA,IAAI;AACL,GAHM,CAAP;AAID,CARG,CAAJ","sourcesContent":["import { Monzilla } from './Monzilla'\nimport fs from 'fs'\nimport util from 'util'\n\nfunction getMockLog() {\n  return {\n    info: jest.fn(),\n    warning: jest.fn(),\n    error: jest.fn()\n  }\n}\n\nfunction getOutput(fn) {\n  const calls = fn.mock.calls\n  if (calls.length > 0 && calls[0].length > 0) {\n    return calls[0][0]\n  } else {\n    return ''\n  }\n}\n\ntest('test help', done => {\n  const mockLog = getMockLog()\n  const tool = new Monzilla(mockLog)\n\n  return tool.run(['--help']).then(exitCode => {\n    expect(exitCode).toBe(0)\n    expect(getOutput(mockLog.info)).toEqual(expect.stringContaining('--help'))\n    done()\n  })\n})\n\ntest('test version', done => {\n  const mockLog = getMockLog()\n  const tool = new Monzilla(mockLog)\n\n  return tool.run(['--version']).then(exitCode => {\n    expect(exitCode).toBe(0)\n    expect(getOutput(mockLog.info)).toEqual(expect.stringMatching(/\\d\\.\\d\\.\\d/))\n    done()\n  })\n})\n\ntest('test no args', done => {\n  const mockLog = getMockLog()\n  const tool = new Monzilla(mockLog)\n\n  return tool.run([]).then(exitCode => {\n    expect(exitCode).toBe(-1)\n    done()\n  })\n})\n"],"file":"MonzillaTool.test.js"}