{"version":3,"sources":["../src/Monzilla.js"],"names":["Monzilla","constructor","log","runCommand","info2","args","command","childProcess","on","code","signal","oldChildProcess","restart","warning2","error","message","process","exit","stdout","data","write","stderr","restartCommand","timeout","clearTimeout","killCommand","pid","then","children","concat","map","p","PID","Promise","resolve","run","argv","options","boolean","version","info","help","globs","_","globList","split","join","length","filenames","forEach","glob","dirnames","Set","filename","dirname","has","statSync","isDirectory","add","emitKeypressEvents","stdin","isTTY","setRawMode","str","key","ctrl","name","watchers","watcher","watch","eventType","push"],"mappings":"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","file":"Monzilla.js","sourcesContent":["import { sync as globSync } from 'glob'\nimport parseArgs from 'minimist'\nimport path from 'path'\nimport fs from 'fs'\nimport { exec, spawn } from 'child_process'\nimport { setTimeout } from 'timers'\nimport autoBind from 'auto-bind2'\nimport readline from 'readline'\nimport chalk from 'chalk'\nimport psTree from 'ps-tree'\nimport { promisify } from 'util'\nimport { fullVersion } from './version'\n\nexport class Monzilla {\n  constructor(log) {\n    autoBind(this)\n    this.log = log\n  }\n\n  runCommand() {\n    this.log.info2(`Running command '${this.args.command}'`)\n    this.log.info2('Control+C to exit/Control+R to restart')\n    const childProcess = exec(this.args.command)\n\n    childProcess.on('exit', (code, signal) => {\n      const oldChildProcess = this.childProcess\n\n      if (oldChildProcess && oldChildProcess.restart) {\n        this.runCommand(this.args.command)\n      } else {\n        if (code === 0) {\n          this.log.info2(`Command exited cleanly`)\n        } else {\n          this.log.warning2(`Command exited with error code ${code}`)\n        }\n      }\n\n      this.log.info2('Waiting for file changes before running again')\n      this.childProcess = null\n    })\n\n    childProcess.on('error', (error) => {\n      this.log.error(error.message)\n      process.exit(-1)\n    })\n\n    childProcess.stdout.on('data', (data) => {\n      process.stdout.write(data)\n    })\n\n    childProcess.stderr.on('data', (data) => {\n      process.stderr.write(data)\n    })\n\n    this.childProcess = childProcess\n  }\n\n  restartCommand() {\n    if (this.timeout) {\n      clearTimeout(this.timeout)\n    }\n\n    this.timeout = setTimeout(() => {\n      let childProcess = this.childProcess\n\n      if (childProcess) {\n        childProcess.restart = true\n        this.killCommand()\n      } else {\n        this.runCommand()\n      }\n    }, 200)\n  }\n\n  killCommand() {\n    const childProcess = this.childProcess\n\n    if (childProcess) {\n      return promisify(psTree)(childProcess.pid).then((children) => {\n        spawn('kill', ['-9'].concat(children.map(function (p) { return p.PID })))\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  async run(argv) {\n    const options = {\n      boolean: [ 'help', 'version' ],\n      '--': true\n    }\n    this.args = parseArgs(argv, options)\n\n    if (this.args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    if (this.args.help) {\n      this.log.info(`\nusage: monzilla [options] <glob>[:<glob>...] -- <command>...\n\noptions:\n  --help                        Shows this help.\n  --version                     Shows the tool version.\n`)\n      return 0\n    }\n\n    const globs = this.args._[0]\n\n    if (!globs) {\n      this.log.error('Must supply at least one glob')\n      return -1\n    }\n\n    const globList = globs.split(':')\n\n    this.args.command = this.args['--'].join(' ')\n\n    if (this.args.command.length === 0) {\n      this.log.error('Must supply a command to run')\n      return -1\n    }\n\n    let filenames = []\n\n    globList.forEach(glob => {\n      filenames = filenames.concat(globSync(glob))\n    })\n\n    let dirnames = new Set()\n\n    filenames.forEach(filename => {\n      const dirname = path.dirname(filename)\n\n      if (!dirnames.has(dirname) && fs.statSync(dirname).isDirectory()) {\n        dirnames.add(dirname)\n      }\n    })\n\n    readline.emitKeypressEvents(process.stdin)\n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(true)\n    }\n\n    process.stdin.on('keypress', (str, key) => {\n      if (key.ctrl) {\n        if (key.name === 'c') {\n          this.killCommand().then(() => {\n            process.exit(0)\n          })\n        } else {\n          this.restartCommand()\n        }\n      }\n    })\n\n    this.runCommand()\n\n    let watchers = []\n\n    dirnames.forEach(dirname => {\n      const watcher = fs.watch(dirname)\n\n      watcher.on('change', (eventType, filename) => {\n        this.restartCommand()\n      })\n\n      watchers.push(watcher)\n    })\n\n    return 0\n  }\n}\n"]}