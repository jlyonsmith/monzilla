{"version":3,"sources":["../src/MonzillaTool.js"],"names":["MonzillaTool","autobind","constructor","container","toolName","log","debug","runCommandInLoop","globs","command","globList","split","filenames","forEach","glob","concat","dirnames","Set","filename","dirname","path","has","fs","statSync","isDirectory","add","readline","emitKeypressEvents","process","stdin","isTTY","setRawMode","on","str","key","ctrl","name","childProcess","killProcess","pid","then","exit","restartCommand","runCommand","watchers","watcher","watch","eventType","timeout","clearTimeout","push","info2","env","FORCE_COLOR","shell","code","signal","warning2","restart","error","message","stdout","data","write","stderr","children","psTree","exec","map","p","PID","join","run","argv","options","boolean","args","version","info","fullVersion","help","_","length"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;IAGaA,Y,OADZC,0B,WAAD,MACaD,YADb,CAC0B;AACxBE,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,SAAKC,QAAL,GAAgBD,SAAS,CAACC,QAA1B;AACA,SAAKC,GAAL,GAAWF,SAAS,CAACE,GAArB;AACA,SAAKC,KAAL,GAAa,CAAC,CAACH,SAAS,CAACG,KAAzB;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC/B,UAAMC,QAAQ,GAAGF,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAjB;AACA,QAAIC,SAAS,GAAG,EAAhB;AAEAF,IAAAA,QAAQ,CAACG,OAAT,CAAkBC,IAAD,IAAU;AACzBF,MAAAA,SAAS,GAAGA,SAAS,CAACG,MAAV,CAAiB,gBAASD,IAAT,CAAjB,CAAZ;AACD,KAFD;AAIA,QAAIE,QAAQ,GAAG,IAAIC,GAAJ,EAAf;AAEAL,IAAAA,SAAS,CAACC,OAAV,CAAmBK,QAAD,IAAc;AAC9B,YAAMC,OAAO,GAAGC,cAAKD,OAAL,CAAaD,QAAb,CAAhB;;AAEA,UAAI,CAACF,QAAQ,CAACK,GAAT,CAAaF,OAAb,CAAD,IAA0BG,YAAGC,QAAH,CAAYJ,OAAZ,EAAqBK,WAArB,EAA9B,EAAkE;AAChER,QAAAA,QAAQ,CAACS,GAAT,CAAaN,OAAb;AACD;AACF,KAND;;AAQAO,sBAASC,kBAAT,CAA4BC,OAAO,CAACC,KAApC;;AAEA,QAAID,OAAO,CAACC,KAAR,CAAcC,KAAlB,EAAyB;AACvBF,MAAAA,OAAO,CAACC,KAAR,CAAcE,UAAd,CAAyB,IAAzB;AACD;;AAEDH,IAAAA,OAAO,CAACC,KAAR,CAAcG,EAAd,CAAiB,UAAjB,EAA6B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzC,UAAIA,GAAG,CAACC,IAAR,EAAc;AACZ,gBAAQD,GAAG,CAACE,IAAZ;AACE,eAAK,GAAL;AACE,gBAAI,KAAKC,YAAT,EAAuB;AACrB,mBAAKC,WAAL,CAAiB,KAAKD,YAAL,CAAkBE,GAAnC,EAAwCC,IAAxC,CAA6C,MAAM;AACjDZ,gBAAAA,OAAO,CAACa,IAAR,CAAa,CAAb;AACD,eAFD;AAGD,aAJD,MAIO;AACLb,cAAAA,OAAO,CAACa,IAAR,CAAa,CAAb;AACD;;AACD;;AACF,eAAK,GAAL;AACE,iBAAKC,cAAL,CAAoBjC,OAApB;AACA;;AACF;AACE;AAdJ;AAgBD;AACF,KAnBD;AAqBA,SAAKkC,UAAL,CAAgBlC,OAAhB;AAEA,QAAImC,QAAQ,GAAG,EAAf;AAEA5B,IAAAA,QAAQ,CAACH,OAAT,CAAkBM,OAAD,IAAa;AAC5B,YAAM0B,OAAO,GAAGvB,YAAGwB,KAAH,CAAS3B,OAAT,CAAhB;;AAEA0B,MAAAA,OAAO,CAACb,EAAR,CAAW,QAAX,EAAqB,CAACe,SAAD,EAAY7B,QAAZ,KAAyB;AAC5C;AACA,YAAI,KAAK8B,OAAT,EAAkB;AAChBC,UAAAA,YAAY,CAAC,KAAKD,OAAN,CAAZ;AACD;;AACD,aAAKA,OAAL,GAAe,wBAAW,MAAM;AAC9B,eAAKN,cAAL,CAAoBjC,OAApB;AACD,SAFc,EAEZ,GAFY,CAAf;AAGD,OARD;AAUAmC,MAAAA,QAAQ,CAACM,IAAT,CAAcL,OAAd;AACD,KAdD;AAeD;;AAEDF,EAAAA,UAAU,CAAClC,OAAD,EAAU;AAClB,SAAKJ,GAAL,CAAS8C,KAAT,CAAgB,oBAAmB1C,OAAQ,GAA3C;AACA,SAAKJ,GAAL,CAAS8C,KAAT,CAAe,wCAAf;AACA,UAAMd,YAAY,GAAG,yBAAK5B,OAAL,EAAc;AACjC2C,MAAAA,GAAG,EAAE,EAAE,GAAGxB,OAAO,CAACwB,GAAb;AAAkBC,QAAAA,WAAW,EAAE;AAA/B,OAD4B;AAEjCC,MAAAA,KAAK,EAAE;AAF0B,KAAd,CAArB;AAKAjB,IAAAA,YAAY,CAACL,EAAb,CAAgB,MAAhB,EAAwB,CAACuB,IAAD,EAAOC,MAAP,KAAkB;AACxC,UAAID,IAAJ,EAAU;AACR,YAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,eAAKlD,GAAL,CAAS8C,KAAT,CAAgB,wBAAhB;AACD,SAFD,MAEO;AACL,eAAK9C,GAAL,CAASoD,QAAT,CAAmB,kCAAiCF,IAAK,EAAzD;AACD;AACF;;AAED,UAAIC,MAAJ,EAAY;AACV,aAAKnD,GAAL,CAASoD,QAAT,CAAmB,gCAA+BD,MAAO,EAAzD;AACD;;AAED,UAAI,KAAKnB,YAAL,CAAkBqB,OAAtB,EAA+B;AAC7B,aAAKf,UAAL,CAAgBlC,OAAhB;AACD,OAFD,MAEO;AACL,aAAK4B,YAAL,GAAoB,IAApB;AACA,aAAKhC,GAAL,CAAS8C,KAAT,CAAe,+CAAf;AACD;AACF,KAnBD;AAqBAd,IAAAA,YAAY,CAACL,EAAb,CAAgB,OAAhB,EAA0B2B,KAAD,IAAW;AAClC,WAAKtD,GAAL,CAASsD,KAAT,CAAeA,KAAK,CAACC,OAArB;AACAhC,MAAAA,OAAO,CAACa,IAAR,CAAa,CAAC,CAAd;AACD,KAHD;AAKAJ,IAAAA,YAAY,CAACwB,MAAb,CAAoB7B,EAApB,CAAuB,MAAvB,EAAgC8B,IAAD,IAAU;AACvClC,MAAAA,OAAO,CAACiC,MAAR,CAAeE,KAAf,CAAqBD,IAArB;AACD,KAFD;AAIAzB,IAAAA,YAAY,CAAC2B,MAAb,CAAoBhC,EAApB,CAAuB,MAAvB,EAAgC8B,IAAD,IAAU;AACvClC,MAAAA,OAAO,CAACoC,MAAR,CAAeD,KAAf,CAAqBD,IAArB;AACD,KAFD;AAIA,SAAKzB,YAAL,GAAoBA,YAApB;AACD;;AAEDK,EAAAA,cAAc,CAACjC,OAAD,EAAU;AACtB,QAAI,KAAK4B,YAAT,EAAuB;AACrB,WAAKA,YAAL,CAAkBqB,OAAlB,GAA4B,IAA5B;AACA,WAAKpB,WAAL,CAAiB,KAAKD,YAAL,CAAkBE,GAAnC,EAFqB,CAGrB;AACD,KAJD,MAIO;AACL,WAAKI,UAAL,CAAgBlC,OAAhB;AACD;AACF;;AAED,QAAM6B,WAAN,CAAkBC,GAAlB,EAAuB;AACrB,UAAM0B,QAAQ,GAAG,MAAM,qBAAUC,eAAV,EAAkB3B,GAAlB,CAAvB;;AAEA,QAAI;AACF,YAAM,qBAAU4B,mBAAV,EACJ,CAAC,MAAD,EAAS,IAAT,EAAe,GAAGF,QAAQ,CAACG,GAAT,CAAcC,CAAD,IAAOA,CAAC,CAACC,GAAtB,CAAlB,EAA8C/B,GAA9C,EAAmDgC,IAAnD,CAAwD,GAAxD,CADI,CAAN;AAGD,KAJD,CAIE,OAAOZ,KAAP,EAAc;AACd,WAAKtD,GAAL,CAASsD,KAAT,CAAgB,sBAAqBpB,GAAI,EAAzC;AACD;AACF;;AAED,QAAMiC,GAAN,CAAUC,IAAV,EAAgB;AACd,UAAMC,OAAO,GAAG;AACdC,MAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,SAAT,CADK;AAEd,YAAM;AAFQ,KAAhB;AAIA,UAAMC,IAAI,GAAG,uBAAUH,IAAV,EAAgBC,OAAhB,CAAb;;AAEA,QAAIE,IAAI,CAACC,OAAT,EAAkB;AAChB,WAAKxE,GAAL,CAASyE,IAAT,CAAcD,OAAO,CAACE,WAAtB;AACA,aAAO,CAAP;AACD;;AAED,QAAIH,IAAI,CAACI,IAAT,EAAe;AACb,WAAK3E,GAAL,CAASyE,IAAT,CAAe;SACZ,KAAK1E,QAAS;;;;;CADjB;AAOA,aAAO,CAAP;AACD;;AAED,UAAMI,KAAK,GAAGoE,IAAI,CAACK,CAAL,CAAO,CAAP,CAAd;;AAEA,QAAI,CAACzE,KAAL,EAAY;AACV,WAAKH,GAAL,CAASsD,KAAT,CAAe,+BAAf;AACA,aAAO,CAAC,CAAR;AACD;;AAED,UAAMlD,OAAO,GAAGmE,IAAI,CAAC,IAAD,CAAJ,CAAWL,IAAX,CAAgB,GAAhB,CAAhB;;AAEA,QAAI9D,OAAO,CAACyE,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAK7E,GAAL,CAASsD,KAAT,CAAe,8BAAf;AACA,aAAO,CAAC,CAAR;AACD;;AAED,SAAKpD,gBAAL,CAAsBC,KAAtB,EAA6BC,OAA7B;AAEA,WAAO,CAAP;AACD;;AApLuB,C","sourcesContent":["import { sync as globSync } from \"glob\"\nimport parseArgs from \"minimist\"\nimport path from \"path\"\nimport fs from \"fs\"\nimport { exec } from \"child_process\"\nimport { setTimeout } from \"timers\"\nimport autobind from \"autobind-decorator\"\nimport readline from \"readline\"\nimport psTree from \"ps-tree\"\nimport { promisify } from \"util\"\nimport * as version from \"./version\"\n\n@autobind\nexport class MonzillaTool {\n  constructor(container) {\n    this.toolName = container.toolName\n    this.log = container.log\n    this.debug = !!container.debug\n  }\n\n  runCommandInLoop(globs, command) {\n    const globList = globs.split(\":\")\n    let filenames = []\n\n    globList.forEach((glob) => {\n      filenames = filenames.concat(globSync(glob))\n    })\n\n    let dirnames = new Set()\n\n    filenames.forEach((filename) => {\n      const dirname = path.dirname(filename)\n\n      if (!dirnames.has(dirname) && fs.statSync(dirname).isDirectory()) {\n        dirnames.add(dirname)\n      }\n    })\n\n    readline.emitKeypressEvents(process.stdin)\n\n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(true)\n    }\n\n    process.stdin.on(\"keypress\", (str, key) => {\n      if (key.ctrl) {\n        switch (key.name) {\n          case \"c\":\n            if (this.childProcess) {\n              this.killProcess(this.childProcess.pid).then(() => {\n                process.exit(0)\n              })\n            } else {\n              process.exit(0)\n            }\n            break\n          case \"r\":\n            this.restartCommand(command)\n            break\n          default:\n            break\n        }\n      }\n    })\n\n    this.runCommand(command)\n\n    let watchers = []\n\n    dirnames.forEach((dirname) => {\n      const watcher = fs.watch(dirname)\n\n      watcher.on(\"change\", (eventType, filename) => {\n        // Debounce changes to files\n        if (this.timeout) {\n          clearTimeout(this.timeout)\n        }\n        this.timeout = setTimeout(() => {\n          this.restartCommand(command)\n        }, 500)\n      })\n\n      watchers.push(watcher)\n    })\n  }\n\n  runCommand(command) {\n    this.log.info2(`Running command '${command}'`)\n    this.log.info2(\"Control+C to exit/Control+R to restart\")\n    const childProcess = exec(command, {\n      env: { ...process.env, FORCE_COLOR: 1 },\n      shell: \"/bin/bash\",\n    })\n\n    childProcess.on(\"exit\", (code, signal) => {\n      if (code) {\n        if (code === 0) {\n          this.log.info2(`Command exited cleanly`)\n        } else {\n          this.log.warning2(`Command exited with error code ${code}`)\n        }\n      }\n\n      if (signal) {\n        this.log.warning2(`Command exited due to signal ${signal}`)\n      }\n\n      if (this.childProcess.restart) {\n        this.runCommand(command)\n      } else {\n        this.childProcess = null\n        this.log.info2(\"Waiting for file changes before running again\")\n      }\n    })\n\n    childProcess.on(\"error\", (error) => {\n      this.log.error(error.message)\n      process.exit(-1)\n    })\n\n    childProcess.stdout.on(\"data\", (data) => {\n      process.stdout.write(data)\n    })\n\n    childProcess.stderr.on(\"data\", (data) => {\n      process.stderr.write(data)\n    })\n\n    this.childProcess = childProcess\n  }\n\n  restartCommand(command) {\n    if (this.childProcess) {\n      this.childProcess.restart = true\n      this.killProcess(this.childProcess.pid)\n      // Process will restart when it exits\n    } else {\n      this.runCommand(command)\n    }\n  }\n\n  async killProcess(pid) {\n    const children = await promisify(psTree)(pid)\n\n    try {\n      await promisify(exec)(\n        [\"kill\", \"-9\", ...children.map((p) => p.PID), pid].join(\" \")\n      )\n    } catch (error) {\n      this.log.error(`Could not kill PID ${pid}`)\n    }\n  }\n\n  async run(argv) {\n    const options = {\n      boolean: [\"help\", \"version\"],\n      \"--\": true,\n    }\n    const args = parseArgs(argv, options)\n\n    if (args.version) {\n      this.log.info(version.fullVersion)\n      return 0\n    }\n\n    if (args.help) {\n      this.log.info(`\nusage: ${this.toolName} [options] <glob>[:<glob>...] -- <command>...\n\noptions:\n  --help                        Shows this help.\n  --version                     Shows the tool version.\n`)\n      return 0\n    }\n\n    const globs = args._[0]\n\n    if (!globs) {\n      this.log.error(\"Must supply at least one glob\")\n      return -1\n    }\n\n    const command = args[\"--\"].join(\" \")\n\n    if (command.length === 0) {\n      this.log.error(\"Must supply a command to run\")\n      return -1\n    }\n\n    this.runCommandInLoop(globs, command)\n\n    return 0\n  }\n}\n"],"file":"MonzillaTool.js"}